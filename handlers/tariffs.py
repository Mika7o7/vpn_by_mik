from aiogram import Router, types
from aiogram.types import BufferedInputFile
from keyboards.inline_keyboards import ikb, depkb
from database import add_user, add_subscription, add_payment
from payments import create, check
from datetime import datetime, timedelta
import asyncio

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
tariffs_router = Router()



@tariffs_router.callback_query(lambda call: call.data == "tariffs")
async def tariffs_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–∞—Ä–∏—Ñ—ã'"""
    print("CALLBACK –ü–û–õ–£–ß–ï–ù:", call.data)  # –õ–æ–≥–∏—Ä—É–µ–º callback
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
        with open("matrix.jpeg", "rb") as file:
            photo = BufferedInputFile(file.read(), filename="matrix.jpeg")
        await call.message.answer_photo(
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=ikb
        )
        await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    except FileNotFoundError:
        await call.message.answer("–§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ tariffs_callback: {e}")

async def process_payment(payment_id: str, chat_id: int, amount: float, bot, tariff: str, duration: timedelta, user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É"""
    for _ in range(10):  # –ü—Ä–æ–±—É–µ–º 10 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 30 —Å–µ–∫—É–Ω–¥
        payment_status = check(payment_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if payment_status:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            start_date = datetime.now()
            end_date = start_date + duration
            add_subscription(user_id, tariff, start_date.strftime("%Y-%m-%d %H:%M:%S"), end_date.strftime("%Y-%m-%d %H:%M:%S"))
            add_payment(user_id, amount, "RUB")

            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            success_message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ '{tariff}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "üì≤ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                "üëâ [App Store](https://apps.apple.com/app/id1441195209)\n\n"
                "‚¨áÔ∏è –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'.\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(chat_id, success_message, parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open("config.ovpn", "rb") as config_file:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config.ovpn —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await bot.send_document(chat_id, config_file, caption="–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

            return
        await asyncio.sleep(30)

    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    await bot.send_message(chat_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    
@tariffs_router.callback_query(lambda call: call.data in ["yearly", "monthly"])
async def process_tariff(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = call.from_user.id
    username = call.from_user.username
    full_name = call.from_user.full_name

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if call.data == "yearly":
        tariff = "–ì–æ–¥–æ–≤–æ–π"
        amount = 12000  # –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–æ–¥–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö
        duration = timedelta(days=365)
    else:
        tariff = "–ú–µ—Å—è—á–Ω—ã–π"
        amount = 1000  # –°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Å—è—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö
        duration = timedelta(days=30)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, username, full_name)
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ª—É—á–∞–µ–º payment_url –∏ payment_id
    payment_url, payment_id = create(amount=amount, chat_id=call.message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await call.message.answer(
        text=(
            f"‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {tariff}\n"
            f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} —Ä—É–±–ª–µ–π\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
        ),
        reply_markup=depkb(payment_url, payment_id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )
    await call.answer()
    

    # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    asyncio.create_task(process_payment(payment_id, call.message.chat.id, amount, call.bot, tariff, duration, user_id))

